name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't cancel all jobs if one fails
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy
    
    - name: Lint with flake8
      run: |
        # Check for critical syntax errors (blocking)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check for style issues (non-blocking)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
    
    - name: Format check with black
      continue-on-error: true
      run: |
        black --check src/ --diff || echo "Code formatting issues found (non-blocking)"
    
    - name: Type check with mypy
      continue-on-error: true
      run: |
        mypy src/ --ignore-missing-imports || echo "Type checking issues found (non-blocking)"
    
    - name: Run pytest tests
      run: |
        echo "Running comprehensive test suite..."
        export PYTHONPATH="$PWD:$PYTHONPATH"
        python -m pytest tests/ -v --tb=short --cov=src/pdf2ubl --cov-report=term-missing --cov-report=xml --cov-fail-under=20
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
    
    # Coverage upload disabled for now
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v3
    #   if: matrix.python-version == '3.11'
    #   with:
    #     file: ./coverage.xml
    #     flags: backend
    #     name: codecov-backend
    #     fail_ci_if_error: false

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/pdf2ubl/gui/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./src/pdf2ubl/gui/frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./src/pdf2ubl/gui/frontend
      continue-on-error: true
      run: npm run lint || echo "ESLint completed with warnings/errors"
    
    - name: Run Tests
      working-directory: ./src/pdf2ubl/gui/frontend
      continue-on-error: true
      run: |
        echo "Frontend tests skipped - to be implemented"
        echo "âœ“ Frontend test step completed"
        # Future: npm test -- --coverage --watchAll=false
    
    - name: Build Frontend
      working-directory: ./src/pdf2ubl/gui/frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/pdf2ubl/gui/frontend/build/


  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/pdf2ubl:latest
          ghcr.io/${{ github.repository_owner }}/pdf2ubl:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max